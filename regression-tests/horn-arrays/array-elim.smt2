(set-logic HORN)

(declare-const Gmain_s0 Bool)
(declare-fun Gmain_s1 () Bool)
(declare-const Gmain_call_init Bool)
(declare-const Gmain_call_end Bool)

(declare-fun preds0 ( Int (Array Int Int) (Array Int Int)) Bool)
(declare-fun preds1 ( Int (Array Int Int) (Array Int Int) Int) Bool)
(declare-fun preds2 ( Int (Array Int Int) (Array Int Int) Int) Bool)
(declare-fun preds3 ( Int (Array Int Int) (Array Int Int) Int) Bool)
(declare-fun preds4 ( Int (Array Int Int) (Array Int Int) Int) Bool)
(declare-fun preds5 ( Int (Array Int Int) (Array Int Int)) Bool)
(declare-fun preds6 ( Int (Array Int Int) (Array Int Int) Int) Bool)
(declare-fun preds7 ( Int (Array Int Int) (Array Int Int) Int) Bool)
(declare-fun preds8 ( Int (Array Int Int) (Array Int Int)) Bool)
(declare-const predcall_init Bool)
(declare-const predcall_end Bool)

(assert (forall ( (size Int) (a1 (Array Int Int)) (a2 (Array Int Int)))(=> (= size 1) (preds0 size a1 a2))))
(assert (forall ( (size Int) (a1 (Array Int Int)) (a2 (Array Int Int)) (a Int))(=> (and (preds0 size a1 a2) (= a 0)) (preds1 size a1 a2 a))))
(assert (forall ( (size Int) (a1 (Array Int Int)) (a2 (Array Int Int)) (a Int))(=> (and (preds1 size a1 a2 a) (<= a (- size 1))) (preds2 size a1 a2 a))))
(assert (forall ( (size Int) (a1 (Array Int Int)) (a2 (Array Int Int)) (a Int) (a1_p (Array Int Int)))(=> (and (preds2 size a1 a2 a) (= a1_p (store a1 a 1))) (preds3 size a1_p a2 a))))
(assert (forall ( (size Int) (a1 (Array Int Int)) (a2 (Array Int Int)) (a Int) (a2_p (Array Int Int)))(=> (and (preds3 size a1 a2 a) (= a2_p (store a2 a 1))) (preds4 size a1 a2_p a))))
(assert (forall ( (size Int) (a1 (Array Int Int)) (a2 (Array Int Int)) (a Int))(=> (preds4 size a1 a2 a) (let ((XX (+ a 1))) (preds1 size a1 a2 XX)))))
(assert (forall ( (size Int) (a1 (Array Int Int)) (a2 (Array Int Int)) (a Int))(=> (and (preds1 size a1 a2 a) (>= a size)) (preds5 size a1 a2))))
(assert (forall ( (size Int) (a1 (Array Int Int)) (a2 (Array Int Int)) (a Int))(=> (and (preds5 size a1 a2) (= a 0)) (preds6 size a1 a2 a))))
(assert (forall ( (size Int) (a1 (Array Int Int)) (a2 (Array Int Int)) (a Int))(=> (and (preds6 size a1 a2 a) (<= a (- size 1))) (preds7 size a1 a2 a))))
(assert (forall ( (size Int) (a1 (Array Int Int)) (a2 (Array Int Int)) (a Int))(=> (preds7 size a1 a2 a) (= (select a1 a) (select a2 a)))))
(assert (forall ( (size Int) (a1 (Array Int Int)) (a2 (Array Int Int)) (a Int))(=> (and (preds6 size a1 a2 a) (>= a size)) (preds8 size a1 a2))))
(assert (forall ( (size Int) (a1 (Array Int Int)) (a2 (Array Int Int)) (a Int))(=> (preds7 size a1 a2 a) (let ((XX (+ a 1))) (preds6 size a1 a2 XX)))))

(check-sat)
