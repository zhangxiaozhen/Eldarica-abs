// Use the option -abstract for thread-modular verification
// (otherwise verification might diverge)

int N = _;
int lock = 0;

int x = 0;

thread A {
  int i, t;

  for (i = 0; i < N; ++i) {
    atomic { assume(!lock);  lock=1; }
    t = x;
    x = t + 1;
    lock = 0;
  }

  assert(x >= N);
}

thread B {
  int i, t;

  for (i = 0; i < N; ++i) {
    atomic { assume(!lock); lock=2; }
    t = x;
    x = t + 1;
    lock = 0;
  }

  assert(x >= N);
}


