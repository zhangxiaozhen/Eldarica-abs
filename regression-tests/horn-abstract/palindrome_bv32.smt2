(set-info :origin "NTS benchmark converted to SMT-LIB2 using Eldarica (http://lara.epfl.ch/w/eldarica)")
(set-logic HORN)
(declare-fun main_q2 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun main_qf () Bool)
(declare-fun main_q0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun main_q1 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun palindrome_q4 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun palindrome_q3 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun palindrome_q2 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun palindrome_q0 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(declare-fun palindrome_q1 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32) (_ BitVec 32)) Bool)
(assert(forall((?A (_ BitVec 32))(?B (_ BitVec 32))(?C (_ BitVec 32))(?D (_ BitVec 32))(?E (_ BitVec 32))(?F (_ BitVec 32)))(=>(and (main_q2 ?A ?B ?C ?D ?E ?F)(bvsle ?D (bvadd (_ bv2 32) (bvsdiv (bvsub ?E ?F) (_ bv2 32))))) main_qf)))
(assert(not (exists((?A (_ BitVec 32))(?B (_ BitVec 32))(?C (_ BitVec 32))(?D (_ BitVec 32))(?E (_ BitVec 32))(?F (_ BitVec 32)))(and (main_q2 ?A ?B ?C ?D ?E ?F)(bvsgt ?D (bvadd (_ bv2 32) (bvsdiv (bvsub ?E ?F) (_ bv2 32))))))))
(assert(forall((?A (_ BitVec 32))(?B (_ BitVec 32))(?C (_ BitVec 32))(?D (_ BitVec 32))(?E (_ BitVec 32))(?F (_ BitVec 32))(?G (_ BitVec 32))(?H (_ BitVec 32))(?I (_ BitVec 32)))(=>(and (main_q0 ?A ?B ?C ?G ?H ?I)(and (and (bvsge ?F (_ bv0 32)) (bvsge ?E (_ bv0 32))) (bvsge ?E ?F))) (main_q1 ?A ?B ?C ?D ?E ?F))))
(assert(forall((?A (_ BitVec 32))(?B (_ BitVec 32))(?C (_ BitVec 32))(?D (_ BitVec 32))(?E (_ BitVec 32))(?F (_ BitVec 32)))(=>(and (and (= ?A ?D) (= ?B ?E)) (= ?C ?F)) (main_q0 ?A ?B ?C ?D ?E ?F))))
(assert(forall((?A (_ BitVec 32))(?B (_ BitVec 32))(?C (_ BitVec 32))(?D (_ BitVec 32))(?E (_ BitVec 32))(?F (_ BitVec 32))(?G (_ BitVec 32))(?H (_ BitVec 32))(?I (_ BitVec 32))(?J (_ BitVec 32))(?K (_ BitVec 32))(?L (_ BitVec 32)))(=>(and (palindrome_q3 ?A ?C ?B ?G ?H ?I ?J ?K)(and (= ?D (_ bv1 32)) (and (and (= ?I ?F) (= ?J ?E)) (= ?K ?L)))) (palindrome_q4 ?A ?B ?C ?D ?E ?F))))
(assert(forall((?A (_ BitVec 32))(?B (_ BitVec 32))(?C (_ BitVec 32))(?D (_ BitVec 32))(?E (_ BitVec 32))(?F (_ BitVec 32))(?G (_ BitVec 32))(?H (_ BitVec 32))(?I (_ BitVec 32))(?J (_ BitVec 32))(?K (_ BitVec 32))(?L (_ BitVec 32)))(=>(and (palindrome_q2 ?A ?C ?B ?G ?H ?I ?J ?K)(and (= ?D (bvadd (_ bv1 32) ?K)) (and (and (= ?I ?F) (= ?J ?E)) (= ?K ?L)))) (palindrome_q4 ?A ?B ?C ?D ?E ?F))))
(assert(forall((?A (_ BitVec 32))(?B (_ BitVec 32))(?C (_ BitVec 32))(?D (_ BitVec 32))(?E (_ BitVec 32))(?F (_ BitVec 32))(?G (_ BitVec 32))(?H (_ BitVec 32))(?I (_ BitVec 32))(?J (_ BitVec 32))(?K (_ BitVec 32))(?L (_ BitVec 32)))(=>(and (palindrome_q0 ?A ?B ?C ?D ?I ?J ?K ?L)(and (bvsge ?K ?J) (and (and (and (= ?I ?E) (= ?J ?F)) (= ?K ?G)) (= ?L ?H)))) (palindrome_q3 ?A ?B ?C ?D ?E ?F ?G ?H))))
(assert(forall((?A (_ BitVec 32))(?B (_ BitVec 32))(?C (_ BitVec 32))(?D (_ BitVec 32))(?E (_ BitVec 32))(?F (_ BitVec 32))(?G (_ BitVec 32))(?H (_ BitVec 32))(?I (_ BitVec 32))(?J (_ BitVec 32))(?K (_ BitVec 32))(?L (_ BitVec 32)))(=>(and (palindrome_q0 ?A ?B ?C ?D ?I ?J ?K ?L)(and (bvslt ?K ?J) (and (and (and (= ?I ?E) (= ?J ?F)) (= ?K ?G)) (= ?L ?H)))) (palindrome_q1 ?A ?B ?C ?D ?E ?F ?G ?H))))
(assert(forall((?A (_ BitVec 32))(?B (_ BitVec 32))(?C (_ BitVec 32))(?D (_ BitVec 32))(?E (_ BitVec 32))(?F (_ BitVec 32))(?G (_ BitVec 32))(?H (_ BitVec 32))(?I (_ BitVec 32))(?J (_ BitVec 32))(?K (_ BitVec 32))(?L (_ BitVec 32))(?M (_ BitVec 32))(?N (_ BitVec 32))(?O (_ BitVec 32))(?P (_ BitVec 32))(?Q (_ BitVec 32))(?R (_ BitVec 32)))(=>(and (and (and (and (palindrome_q1 ?A ?B ?C ?D ?I ?J ?K ?L)(and (= ?M (bvadd ?K (_ bv1 32))) (= ?N (bvsub ?J (_ bv1 32)))))(palindrome_q4 ?O ?M ?N ?P ?Q ?R))(= ?P ?H))(and (and (= ?I ?E) (= ?J ?F)) (= ?K ?G))) (palindrome_q2 ?A ?B ?C ?D ?E ?F ?G ?H))))
(assert(forall((?A (_ BitVec 32))(?B (_ BitVec 32))(?C (_ BitVec 32))(?D (_ BitVec 32))(?E (_ BitVec 32))(?F (_ BitVec 32))(?G (_ BitVec 32))(?H (_ BitVec 32))(?I (_ BitVec 32))(?J (_ BitVec 32))(?K (_ BitVec 32))(?L (_ BitVec 32))(?M (_ BitVec 32))(?N (_ BitVec 32))(?O (_ BitVec 32))(?P (_ BitVec 32)))(=>(and (and (palindrome_q1 ?I ?J ?K ?L ?M ?N ?O ?P)(and (= ?C (bvadd ?O (_ bv1 32))) (= ?B (bvsub ?N (_ bv1 32)))))(and (and (= ?A ?E) (= ?C ?G)) (= ?B ?F))) (palindrome_q0 ?A ?B ?C ?D ?E ?F ?G ?H))))
(assert(forall((?A (_ BitVec 32))(?B (_ BitVec 32))(?C (_ BitVec 32))(?D (_ BitVec 32))(?E (_ BitVec 32))(?F (_ BitVec 32))(?G (_ BitVec 32))(?H (_ BitVec 32))(?I (_ BitVec 32))(?J (_ BitVec 32))(?K (_ BitVec 32))(?L (_ BitVec 32))(?M (_ BitVec 32))(?N (_ BitVec 32))(?O (_ BitVec 32)))(=>(and (and (and (and (main_q1 ?A ?B ?C ?G ?H ?I)(and (= ?J ?I) (= ?K ?H)))(palindrome_q4 ?L ?J ?K ?M ?N ?O))(= ?M ?D))(and (= ?H ?E) (= ?I ?F))) (main_q2 ?A ?B ?C ?D ?E ?F))))
(assert(forall((?A (_ BitVec 32))(?B (_ BitVec 32))(?C (_ BitVec 32))(?D (_ BitVec 32))(?E (_ BitVec 32))(?F (_ BitVec 32))(?G (_ BitVec 32))(?H (_ BitVec 32))(?I (_ BitVec 32))(?J (_ BitVec 32))(?K (_ BitVec 32))(?L (_ BitVec 32))(?M (_ BitVec 32))(?N (_ BitVec 32)))(=>(and (and (main_q1 ?I ?J ?K ?L ?M ?N)(and (= ?C ?N) (= ?B ?M)))(and (and (= ?A ?E) (= ?C ?G)) (= ?B ?F))) (palindrome_q0 ?A ?B ?C ?D ?E ?F ?G ?H))))
(check-sat)
